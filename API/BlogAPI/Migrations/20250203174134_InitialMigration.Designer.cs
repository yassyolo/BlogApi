// <auto-generated />
using System;
using BlogAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250203174134_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlogAPI.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the user");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the user");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Application user entity");

                    b.HasData(
                        new
                        {
                            Id = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "031a2e4f-d0e0-48da-b1d2-3fda1f1277f4",
                            Description = "",
                            Email = "user@blog.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@BLOG.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGeavXI+lWKrRsDOKsyaN1oPzHSjsVwg9wqVyGoHAzaUyI0hkQvqCTkQ6fmQ/TYc8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10768241-252d-447b-9612-4e1b7d7374f5",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "f3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95cc219f-6fe6-49c7-8c32-4a9e9f5be025",
                            Description = "",
                            Email = "admin@blog.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BLOG.COM",
                            NormalizedUserName = "ADMIN@BLOG.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ9BLTLEd35qeX+7Rlvvlvtd3t4muXrqoGkqOAeXXVEu8IKYcYpK7YwbHrYB4ipgYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a211c72-1212-4a30-b1ad-bb6e3501d3ea",
                            TwoFactorEnabled = false,
                            UserName = "admin@blog.com"
                        },
                        new
                        {
                            Id = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb219d5c-1347-4532-b872-ec5a3c234e96",
                            Description = "",
                            Email = "user2@blog.com",
                            EmailConfirmed = false,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@BLOG.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAENzU9IQPF4JPvPIzG57v+kVoYZVI2CGsVmAEyvfTdO1vMMNmy2RHV+DJpZqSQWo+gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de0ba297-f580-49b7-b7d3-e97846c767af",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the blog post");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Author identifier");

                    b.Property<int>("BookmarkCount")
                        .HasColumnType("int")
                        .HasComment("Number of bookmarks the blog post has");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Content of the blog post");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the blog post was created");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Slug of the blog post");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title of the blog post");

                    b.Property<string>("TocJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Table of contents for the blog post");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int")
                        .HasComment("Number of views the blog post has");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogPosts");

                    b.HasComment("Blog post entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 35,
                            CategoryId = 2,
                            Content = "Web development is an exciting field that involves building modern websites...",
                            CreationDate = new DateTime(2025, 1, 24, 17, 41, 34, 114, DateTimeKind.Utc).AddTicks(9369),
                            Slug = "getting-started-with-web-development",
                            Title = "Getting Started with Web Development",
                            TocJson = "[]",
                            ViewCount = 250
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c",
                            BookmarkCount = 50,
                            CategoryId = 3,
                            Content = "Machine learning is revolutionizing the tech industry...",
                            CreationDate = new DateTime(2025, 1, 26, 17, 41, 34, 114, DateTimeKind.Utc).AddTicks(9372),
                            Slug = "machine-learning-for-beginners",
                            Title = "Machine Learning for Beginners",
                            TocJson = "[]",
                            ViewCount = 420
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 60,
                            CategoryId = 9,
                            Content = "Blockchain is transforming industries beyond just cryptocurrencies...",
                            CreationDate = new DateTime(2025, 1, 28, 17, 41, 34, 114, DateTimeKind.Utc).AddTicks(9374),
                            Slug = "the-rise-of-blockchain-technology",
                            Title = "The Rise of Blockchain Technology",
                            TocJson = "[]",
                            ViewCount = 380
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 80,
                            CategoryId = 5,
                            Content = "As cyber threats evolve, staying ahead with the best security practices is crucial...",
                            CreationDate = new DateTime(2025, 1, 30, 17, 41, 34, 114, DateTimeKind.Utc).AddTicks(9375),
                            Slug = "cybersecurity-best-practices-2025",
                            Title = "Cybersecurity Best Practices for 2025",
                            TocJson = "[]",
                            ViewCount = 600
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 70,
                            CategoryId = 4,
                            Content = "Cloud computing has changed the way businesses operate...",
                            CreationDate = new DateTime(2025, 1, 31, 17, 41, 34, 114, DateTimeKind.Utc).AddTicks(9377),
                            Slug = "future-of-cloud-computing",
                            Title = "The Future of Cloud Computing",
                            TocJson = "[]",
                            ViewCount = 510
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 95,
                            CategoryId = 3,
                            Content = "Artificial Intelligence is no longer a concept of the future...",
                            CreationDate = new DateTime(2025, 2, 1, 17, 41, 34, 114, DateTimeKind.Utc).AddTicks(9378),
                            Slug = "how-ai-is-shaping-the-future",
                            Title = "How AI is Shaping the Future",
                            TocJson = "[]",
                            ViewCount = 720
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 40,
                            CategoryId = 6,
                            Content = "Understanding nutrition is key to maintaining a healthy lifestyle...",
                            CreationDate = new DateTime(2025, 2, 2, 17, 41, 34, 114, DateTimeKind.Utc).AddTicks(9379),
                            Slug = "science-behind-healthy-eating",
                            Title = "The Science Behind Healthy Eating",
                            TocJson = "[]",
                            ViewCount = 350
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BlogPostTag", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasComment("Primary key of the blog post tag");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasComment("Primary key of the tag");

                    b.HasKey("BlogId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogPostsTags");

                    b.HasComment("Tags of the blog post");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            TagId = 1
                        },
                        new
                        {
                            BlogId = 1,
                            TagId = 8
                        },
                        new
                        {
                            BlogId = 2,
                            TagId = 2
                        },
                        new
                        {
                            BlogId = 2,
                            TagId = 4
                        },
                        new
                        {
                            BlogId = 3,
                            TagId = 7
                        },
                        new
                        {
                            BlogId = 3,
                            TagId = 9
                        },
                        new
                        {
                            BlogId = 4,
                            TagId = 6
                        },
                        new
                        {
                            BlogId = 4,
                            TagId = 9
                        },
                        new
                        {
                            BlogId = 5,
                            TagId = 5
                        },
                        new
                        {
                            BlogId = 5,
                            TagId = 9
                        },
                        new
                        {
                            BlogId = 6,
                            TagId = 3
                        },
                        new
                        {
                            BlogId = 6,
                            TagId = 4
                        },
                        new
                        {
                            BlogId = 7,
                            TagId = 10
                        },
                        new
                        {
                            BlogId = 7,
                            TagId = 6
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the bookmark");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Author identifier (ApplicationUser ID)");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int")
                        .HasComment("Blog identifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the bookmark was created");

                    b.Property<int>("FolderId")
                        .HasColumnType("int")
                        .HasComment("Folder identifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.HasIndex("FolderId");

                    b.ToTable("Bookmarks");

                    b.HasComment("Bookmark entity");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BookmarkFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the bookmark folder.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date the bookmark folder was created.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the bookmark folder.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user identifier.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BookmarkFolders");

                    b.HasComment("This class represents a bookmark folder.");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the category");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("URL handle for the category");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasComment("Category entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology",
                            Slug = "technology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programming",
                            Slug = "programming"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Artificial Intelligence",
                            Slug = "ai"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cloud Computing",
                            Slug = "cloud-computing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cybersecurity",
                            Slug = "cybersecurity"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Health & Wellness",
                            Slug = "health-wellness"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Finance",
                            Slug = "finance"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Education",
                            Slug = "education"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Business",
                            Slug = "business"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gaming",
                            Slug = "gaming"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sports",
                            Slug = "sports"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Entertainment",
                            Slug = "entertainment"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Science",
                            Slug = "science"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Travel",
                            Slug = "travel"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Food & Cooking",
                            Slug = "food-cooking"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the comment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int")
                        .HasComment("Blog post identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Content of the comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the comment was created");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasComment("Number of likes the comment has");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasComment("Comment entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogPostId = 1,
                            Content = "Great insights! Thanks for sharing.",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(412),
                            Likes = 5,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 2,
                            BlogPostId = 1,
                            Content = "I found this very useful. Keep it up!",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(413),
                            Likes = 3,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 3,
                            BlogPostId = 1,
                            Content = "Interesting perspective, but I have a different view.",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(414),
                            Likes = 2,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 4,
                            BlogPostId = 1,
                            Content = "Can you elaborate more on this topic?",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(414),
                            Likes = 4,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 5,
                            BlogPostId = 1,
                            Content = "This is exactly what I was looking for!",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(415),
                            Likes = 6,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 6,
                            BlogPostId = 2,
                            Content = "Nice explanation! Helped me a lot.",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(415),
                            Likes = 2,
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"
                        },
                        new
                        {
                            Id = 7,
                            BlogPostId = 2,
                            Content = "I think there's a small mistake in the second section.",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(416),
                            Likes = 1,
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"
                        },
                        new
                        {
                            Id = 8,
                            BlogPostId = 3,
                            Content = "Awesome article! Thanks for posting.",
                            CreatedDate = new DateTime(2025, 2, 3, 17, 41, 34, 115, DateTimeKind.Utc).AddTicks(417),
                            Likes = 3,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the blog image.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BlogId")
                        .HasColumnType("int")
                        .HasComment("The blog post identifier.");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("The date the image was created.");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The file extension of the image.");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The name of the file.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The title of the image.");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The URL of the image.");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user identifier.");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Images");

                    b.HasComment("This class represents a blog image.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            DateCreated = new DateTime(2025, 2, 3, 19, 41, 34, 115, DateTimeKind.Local).AddTicks(1205),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 2,
                            DateCreated = new DateTime(2025, 2, 3, 19, 41, 34, 115, DateTimeKind.Local).AddTicks(1208),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 3,
                            DateCreated = new DateTime(2025, 2, 3, 19, 41, 34, 115, DateTimeKind.Local).AddTicks(1211),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 4,
                            DateCreated = new DateTime(2025, 2, 3, 19, 41, 34, 115, DateTimeKind.Local).AddTicks(1213),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 5,
                            DateCreated = new DateTime(2025, 2, 3, 19, 41, 34, 115, DateTimeKind.Local).AddTicks(1216),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 6,
                            BlogId = 6,
                            DateCreated = new DateTime(2025, 2, 3, 19, 41, 34, 115, DateTimeKind.Local).AddTicks(1218),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 7,
                            BlogId = 7,
                            DateCreated = new DateTime(2025, 2, 3, 19, 41, 34, 115, DateTimeKind.Local).AddTicks(1221),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the tag.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The name of the tag.");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The URL handle for the tag.");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasComment("This class represents a tag for a blog post.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Web Development",
                            Slug = "web-development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Machine Learning",
                            Slug = "machine-learning"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AI",
                            Slug = "ai"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Data Science",
                            Slug = "data-science"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cloud Computing",
                            Slug = "cloud-computing"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cybersecurity",
                            Slug = "cybersecurity"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Blockchain",
                            Slug = "blockchain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Software Engineering",
                            Slug = "software-engineering"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Technology",
                            Slug = "technology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cooking",
                            Slug = "cooking"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e83adcc5-9da0-4021-a816-3cb518656890",
                            ConcurrencyStamp = "e83adcc5-9da0-4021-a816-3cb518656890",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b2dd1368-11e6-4084-ad72-dd78c95c3290",
                            ConcurrencyStamp = "b2dd1368-11e6-4084-ad72-dd78c95c3290",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            RoleId = "e83adcc5-9da0-4021-a816-3cb518656890"
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            RoleId = "b2dd1368-11e6-4084-ad72-dd78c95c3290"
                        },
                        new
                        {
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c",
                            RoleId = "b2dd1368-11e6-4084-ad72-dd78c95c3290"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Blog", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.Category", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BlogPostTag", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Bookmark", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "Author")
                        .WithMany("Bookmarks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.Blog", "Blog")
                        .WithMany("Bookmarks")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.BookmarkFolder", "Folder")
                        .WithMany("Bookmarks")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Blog");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BookmarkFolder", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany("BookmarkFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Comment", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Blog", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Images", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Blog", "Blog")
                        .WithMany("Images")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithOne("ProfileImage")
                        .HasForeignKey("BlogAPI.Models.Domain.Images", "UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("BookmarkFolders");

                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Blog", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BookmarkFolder", b =>
                {
                    b.Navigation("Bookmarks");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Category", b =>
                {
                    b.Navigation("BlogPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
