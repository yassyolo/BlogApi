// <auto-generated />
using System;
using BlogAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250209105608_Test")]
    partial class Test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlogAPI.Models.Domain.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the achievement");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConditionType")
                        .HasColumnType("int")
                        .HasComment("Condition type of the achievement");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("int")
                        .HasComment("Condition value of the achievement");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description of the achievement");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the achievement");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("Points of the achievement");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasComment("Achievement entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConditionType = 1,
                            ConditionValue = 1,
                            Description = "Read 1 blog",
                            Name = "First Blog Read",
                            Points = 10
                        },
                        new
                        {
                            Id = 2,
                            ConditionType = 1,
                            ConditionValue = 10,
                            Description = "Read 10 blogs",
                            Name = "Bookworm",
                            Points = 50
                        },
                        new
                        {
                            Id = 3,
                            ConditionType = 1,
                            ConditionValue = 50,
                            Description = "Read 50 blogs",
                            Name = "Super Reader",
                            Points = 150
                        },
                        new
                        {
                            Id = 4,
                            ConditionType = 2,
                            ConditionValue = 1,
                            Description = "Save 1 blog to bookmarks",
                            Name = "First Bookmark",
                            Points = 10
                        },
                        new
                        {
                            Id = 5,
                            ConditionType = 2,
                            ConditionValue = 3,
                            Description = "Create 3 bookmark folders",
                            Name = "Organizer",
                            Points = 30
                        },
                        new
                        {
                            Id = 6,
                            ConditionType = 2,
                            ConditionValue = 100,
                            Description = "Save 100 blogs to bookmarks",
                            Name = "Bookmark Master",
                            Points = 200
                        },
                        new
                        {
                            Id = 7,
                            ConditionType = 3,
                            ConditionValue = 1,
                            Description = "Publish your first blog",
                            Name = "First Blog Post",
                            Points = 20
                        },
                        new
                        {
                            Id = 8,
                            ConditionType = 3,
                            ConditionValue = 5,
                            Description = "Publish 5 blogs",
                            Name = "Content Creator",
                            Points = 100
                        },
                        new
                        {
                            Id = 9,
                            ConditionType = 3,
                            ConditionValue = 100,
                            Description = "Get 100 likes on your blogs",
                            Name = "Influencer",
                            Points = 250
                        },
                        new
                        {
                            Id = 10,
                            ConditionType = 4,
                            ConditionValue = 1,
                            Description = "Leave your first comment",
                            Name = "First Comment",
                            Points = 10
                        },
                        new
                        {
                            Id = 11,
                            ConditionType = 4,
                            ConditionValue = 10,
                            Description = "Leave 10 comments",
                            Name = "Active Discussant",
                            Points = 50
                        },
                        new
                        {
                            Id = 12,
                            ConditionType = 4,
                            ConditionValue = 50,
                            Description = "Leave 50 comments",
                            Name = "Comment Master",
                            Points = 150
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the user");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the user");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("Points of user");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Application user entity");

                    b.HasData(
                        new
                        {
                            Id = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4984cee-fcf2-43b2-9c70-3ec759b7d612",
                            Description = "",
                            Email = "user@blog.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@BLOG.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAENrwlIU3bbftSkQBjo1B3t464nbyDDvzHQWIG4JIZRs+sxL2JrTsHoHaR3QBoc2Mtg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "54da6ee6-76b4-4bd6-97bc-467588639d56",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "f3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8afc659f-70d9-4830-a3e7-e191bb3b68d8",
                            Description = "",
                            Email = "admin@blog.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BLOG.COM",
                            NormalizedUserName = "ADMIN@BLOG.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHX1XWRfjhlo7XFf1b1Dsg0oXeWM7WzjDg5PmhHQmfW4LF5NhIG6S01uN5124xjpSg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "8a06c0e0-aadc-44bf-9746-f97add32d47a",
                            TwoFactorEnabled = false,
                            UserName = "admin@blog.com"
                        },
                        new
                        {
                            Id = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b626fe0-124a-406a-ab40-32514c11fdee",
                            Description = "",
                            Email = "user2@blog.com",
                            EmailConfirmed = false,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@BLOG.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEM45271WW1WyT/MWPyqWAvraZU6ECdr+ADQKTVuCpzMLAbaVBce6tntq7R2gE2v1ZQ==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "a41bd303-8cc6-4fa4-8e3f-a4ce97ea3d33",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the blog post");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Author identifier");

                    b.Property<int>("BookmarkCount")
                        .HasColumnType("int")
                        .HasComment("Number of bookmarks the blog post has");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Content of the blog post");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the blog post was created");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Slug of the blog post");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title of the blog post");

                    b.Property<string>("TocJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Table of contents for the blog post");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int")
                        .HasComment("Number of views the blog post has");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogPosts");

                    b.HasComment("Blog post entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 35,
                            CategoryId = 2,
                            Content = "Web development is an exciting field that involves building modern websites...",
                            CreationDate = new DateTime(2025, 1, 30, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(6809),
                            Slug = "getting-started-with-web-development",
                            Title = "Getting Started with Web Development",
                            TocJson = "[]",
                            ViewCount = 250
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c",
                            BookmarkCount = 50,
                            CategoryId = 3,
                            Content = "Machine learning is revolutionizing the tech industry...",
                            CreationDate = new DateTime(2025, 2, 1, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(6812),
                            Slug = "machine-learning-for-beginners",
                            Title = "Machine Learning for Beginners",
                            TocJson = "[]",
                            ViewCount = 420
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 60,
                            CategoryId = 9,
                            Content = "Blockchain is transforming industries beyond just cryptocurrencies...",
                            CreationDate = new DateTime(2025, 2, 3, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(6814),
                            Slug = "the-rise-of-blockchain-technology",
                            Title = "The Rise of Blockchain Technology",
                            TocJson = "[]",
                            ViewCount = 380
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 80,
                            CategoryId = 5,
                            Content = "As cyber threats evolve, staying ahead with the best security practices is crucial...",
                            CreationDate = new DateTime(2025, 2, 5, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(6815),
                            Slug = "cybersecurity-best-practices-2025",
                            Title = "Cybersecurity Best Practices for 2025",
                            TocJson = "[]",
                            ViewCount = 600
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 70,
                            CategoryId = 4,
                            Content = "Cloud computing has changed the way businesses operate...",
                            CreationDate = new DateTime(2025, 2, 6, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(6817),
                            Slug = "future-of-cloud-computing",
                            Title = "The Future of Cloud Computing",
                            TocJson = "[]",
                            ViewCount = 510
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 95,
                            CategoryId = 3,
                            Content = "Artificial Intelligence is no longer a concept of the future...",
                            CreationDate = new DateTime(2025, 2, 7, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(6818),
                            Slug = "how-ai-is-shaping-the-future",
                            Title = "How AI is Shaping the Future",
                            TocJson = "[]",
                            ViewCount = 720
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            BookmarkCount = 40,
                            CategoryId = 6,
                            Content = "Understanding nutrition is key to maintaining a healthy lifestyle...",
                            CreationDate = new DateTime(2025, 2, 8, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(6820),
                            Slug = "science-behind-healthy-eating",
                            Title = "The Science Behind Healthy Eating",
                            TocJson = "[]",
                            ViewCount = 350
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BlogPostTag", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasComment("Primary key of the blog post tag");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasComment("Primary key of the tag");

                    b.HasKey("BlogId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogPostsTags");

                    b.HasComment("Tags of the blog post");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            TagId = 1
                        },
                        new
                        {
                            BlogId = 1,
                            TagId = 8
                        },
                        new
                        {
                            BlogId = 2,
                            TagId = 2
                        },
                        new
                        {
                            BlogId = 2,
                            TagId = 4
                        },
                        new
                        {
                            BlogId = 3,
                            TagId = 7
                        },
                        new
                        {
                            BlogId = 3,
                            TagId = 9
                        },
                        new
                        {
                            BlogId = 4,
                            TagId = 6
                        },
                        new
                        {
                            BlogId = 4,
                            TagId = 9
                        },
                        new
                        {
                            BlogId = 5,
                            TagId = 5
                        },
                        new
                        {
                            BlogId = 5,
                            TagId = 9
                        },
                        new
                        {
                            BlogId = 6,
                            TagId = 3
                        },
                        new
                        {
                            BlogId = 6,
                            TagId = 4
                        },
                        new
                        {
                            BlogId = 7,
                            TagId = 10
                        },
                        new
                        {
                            BlogId = 7,
                            TagId = 6
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the bookmark");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Author identifier (ApplicationUser ID)");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int")
                        .HasComment("Blog identifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the bookmark was created");

                    b.Property<int>("FolderId")
                        .HasColumnType("int")
                        .HasComment("Folder identifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.HasIndex("FolderId");

                    b.ToTable("Bookmarks");

                    b.HasComment("Bookmark entity");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BookmarkFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the bookmark folder.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date the bookmark folder was created.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the bookmark folder.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user identifier.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BookmarkFolders");

                    b.HasComment("This class represents a bookmark folder.");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the category");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("URL handle for the category");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasComment("Category entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology",
                            Slug = "technology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programming",
                            Slug = "programming"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Artificial Intelligence",
                            Slug = "ai"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cloud Computing",
                            Slug = "cloud-computing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cybersecurity",
                            Slug = "cybersecurity"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Health & Wellness",
                            Slug = "health-wellness"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Finance",
                            Slug = "finance"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Education",
                            Slug = "education"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Business",
                            Slug = "business"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gaming",
                            Slug = "gaming"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sports",
                            Slug = "sports"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Entertainment",
                            Slug = "entertainment"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Science",
                            Slug = "science"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Travel",
                            Slug = "travel"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Food & Cooking",
                            Slug = "food-cooking"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the comment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int")
                        .HasComment("Blog post identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Content of the comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the comment was created");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasComment("Number of likes the comment has");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasComment("Comment entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogPostId = 1,
                            Content = "Great insights! Thanks for sharing.",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(7996),
                            Likes = 5,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 2,
                            BlogPostId = 1,
                            Content = "I found this very useful. Keep it up!",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(7997),
                            Likes = 3,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 3,
                            BlogPostId = 1,
                            Content = "Interesting perspective, but I have a different view.",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(7998),
                            Likes = 2,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 4,
                            BlogPostId = 1,
                            Content = "Can you elaborate more on this topic?",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(7998),
                            Likes = 4,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 5,
                            BlogPostId = 1,
                            Content = "This is exactly what I was looking for!",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(7999),
                            Likes = 6,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        },
                        new
                        {
                            Id = 6,
                            BlogPostId = 2,
                            Content = "Nice explanation! Helped me a lot.",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(8000),
                            Likes = 2,
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"
                        },
                        new
                        {
                            Id = 7,
                            BlogPostId = 2,
                            Content = "I think there's a small mistake in the second section.",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(8000),
                            Likes = 1,
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"
                        },
                        new
                        {
                            Id = 8,
                            BlogPostId = 3,
                            Content = "Awesome article! Thanks for posting.",
                            CreatedDate = new DateTime(2025, 2, 9, 10, 56, 7, 348, DateTimeKind.Utc).AddTicks(8001),
                            Likes = 3,
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of the forum category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the forum category");

                    b.HasKey("Id");

                    b.ToTable("ForumCategories");

                    b.HasComment("Categories of the forum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Science"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumCommunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the community");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ForumCategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ForumCategoryId");

                    b.ToTable("ForumCommunities");

                    b.HasComment("Communities within a category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Discuss coding and development",
                            ForumCategoryId = 1,
                            Name = "Programming",
                            Slug = "programming"
                        },
                        new
                        {
                            Id = 2,
                            Description = "AI research, projects, and discussions",
                            ForumCategoryId = 1,
                            Name = "AI & Machine Learning",
                            Slug = "ai-ml"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Discuss PC games and setups",
                            ForumCategoryId = 2,
                            Name = "PC Gaming",
                            Slug = "pc-gaming"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Talk about console games and news",
                            ForumCategoryId = 2,
                            Name = "Console Gaming",
                            Slug = "console-gaming"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Best online learning resources",
                            ForumCategoryId = 3,
                            Name = "Online Courses",
                            Slug = "online-courses"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Latest in movies and television",
                            ForumCategoryId = 4,
                            Name = "Movies & TV Shows",
                            Slug = "movies-tv"
                        },
                        new
                        {
                            Id = 9,
                            Description = "News about space and planets",
                            ForumCategoryId = 5,
                            Name = "Space & Astronomy",
                            Slug = "space-astronomy"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the post");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForumCommunityId")
                        .HasColumnType("int")
                        .HasComment("Community identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("Votes")
                        .HasColumnType("int")
                        .HasComment("Votes of the post");

                    b.HasKey("Id");

                    b.HasIndex("ForumCommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");

                    b.HasComment("Posts entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "What do you think are the best programming languages to learn in 2025?",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1338),
                            ForumCommunityId = 1,
                            Title = "Best Programming Languages in 2025?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 15
                        },
                        new
                        {
                            Id = 2,
                            Content = "Looking for tips on improving C# performance and efficiency.",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1339),
                            ForumCommunityId = 1,
                            Title = "How to optimize C# code?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 8
                        },
                        new
                        {
                            Id = 3,
                            Content = "I'm new to Java. Can anyone recommend books or courses?",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1341),
                            ForumCommunityId = 1,
                            Title = "What are the best resources to learn Java?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 5
                        },
                        new
                        {
                            Id = 4,
                            Content = "What do you think will be the major trends in AI this year?",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1342),
                            ForumCommunityId = 2,
                            Title = "AI trends in 2025?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 20
                        },
                        new
                        {
                            Id = 5,
                            Content = "Any recommendations for courses or projects?",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1343),
                            ForumCommunityId = 2,
                            Title = "Best way to get started with Deep Learning?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 12
                        },
                        new
                        {
                            Id = 6,
                            Content = "Should AI have more regulation? What are your views?",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1344),
                            ForumCommunityId = 2,
                            Title = "Ethics in AI - Your thoughts?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 9
                        },
                        new
                        {
                            Id = 7,
                            Content = "Looking for recommendations on budget and high-end gaming builds.",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1345),
                            ForumCommunityId = 3,
                            Title = "Best PC builds for gaming in 2025?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 18
                        },
                        new
                        {
                            Id = 8,
                            Content = "List your favorite PC games of all time and why!",
                            CreatedAt = new DateTime(2025, 2, 9, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(1346),
                            ForumCommunityId = 3,
                            Title = "What are your favorite PC games?",
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            Votes = 22
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumPostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the comment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the comment was created");

                    b.Property<int>("ForumPostId")
                        .HasColumnType("int")
                        .HasComment("Forum post identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("Votes")
                        .HasColumnType("int")
                        .HasComment("Navigation property to the user that created this comment");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPostComments");

                    b.HasComment("Comments on a forum post");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the blog image.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AchievementId")
                        .HasColumnType("int")
                        .HasComment("The achievement identifier.");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int")
                        .HasComment("The blog post identifier.");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("The date the image was created.");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The file extension of the image.");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The name of the file.");

                    b.Property<int?>("ForumCommunityId")
                        .HasColumnType("int")
                        .HasComment("The forum comment identifier.");

                    b.Property<int?>("ForumPostId")
                        .HasColumnType("int")
                        .HasComment("The forum post identifier.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The title of the image.");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The URL of the image.");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user identifier.");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId")
                        .IsUnique()
                        .HasFilter("[AchievementId] IS NOT NULL");

                    b.HasIndex("BlogId");

                    b.HasIndex("ForumCommunityId")
                        .IsUnique()
                        .HasFilter("[ForumCommunityId] IS NOT NULL");

                    b.HasIndex("ForumPostId")
                        .IsUnique()
                        .HasFilter("[ForumPostId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Images");

                    b.HasComment("This class represents a blog image.");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            AchievementId = 1,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9342),
                            FileExtension = ".jpg",
                            FileName = "1",
                            Title = "1",
                            Url = "https://localhost:7166/Images/Achievements/1.jpg"
                        },
                        new
                        {
                            Id = 21,
                            AchievementId = 2,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9344),
                            FileExtension = ".jpg",
                            FileName = "2",
                            Title = "2",
                            Url = "https://localhost:7166/Images/Achievements/2.jpg"
                        },
                        new
                        {
                            Id = 22,
                            AchievementId = 3,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9347),
                            FileExtension = ".jpg",
                            FileName = "3",
                            Title = "3",
                            Url = "https://localhost:7166/Images/Achievements/3.jpg"
                        },
                        new
                        {
                            Id = 23,
                            AchievementId = 4,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9349),
                            FileExtension = ".jpg",
                            FileName = "4",
                            Title = "4",
                            Url = "https://localhost:7166/Images/Achievements/4.jpg"
                        },
                        new
                        {
                            Id = 24,
                            AchievementId = 5,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9352),
                            FileExtension = ".jpg",
                            FileName = "5",
                            Title = "5",
                            Url = "https://localhost:7166/Images/Achievements/5.jpg"
                        },
                        new
                        {
                            Id = 25,
                            AchievementId = 6,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9354),
                            FileExtension = ".jpg",
                            FileName = "6",
                            Title = "6",
                            Url = "https://localhost:7166/Images/Achievements/6.jpg"
                        },
                        new
                        {
                            Id = 26,
                            AchievementId = 7,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9357),
                            FileExtension = ".jpg",
                            FileName = "7",
                            Title = "7",
                            Url = "https://localhost:7166/Images/Achievements/7.jpg"
                        },
                        new
                        {
                            Id = 27,
                            AchievementId = 8,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9359),
                            FileExtension = ".jpg",
                            FileName = "8",
                            Title = "8",
                            Url = "https://localhost:7166/Images/Achievements/8.jpg"
                        },
                        new
                        {
                            Id = 28,
                            AchievementId = 9,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9361),
                            FileExtension = ".jpg",
                            FileName = "9",
                            Title = "9",
                            Url = "https://localhost:7166/Images/Achievements/9.jpg"
                        },
                        new
                        {
                            Id = 29,
                            AchievementId = 10,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9364),
                            FileExtension = ".jpg",
                            FileName = "10",
                            Title = "10",
                            Url = "https://localhost:7166/Images/Achievements/10.jpg"
                        },
                        new
                        {
                            Id = 30,
                            AchievementId = 11,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9366),
                            FileExtension = ".jpg",
                            FileName = "11",
                            Title = "11",
                            Url = "https://localhost:7166/Images/Achievements/11.jpg"
                        },
                        new
                        {
                            Id = 31,
                            AchievementId = 12,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9369),
                            FileExtension = ".jpg",
                            FileName = "12",
                            Title = "12",
                            Url = "https://localhost:7166/Images/Achievements/12.jpg"
                        },
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9323),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 2,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9327),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 3,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9329),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 4,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9332),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 5,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9334),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 6,
                            BlogId = 6,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9337),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        },
                        new
                        {
                            Id = 7,
                            BlogId = 7,
                            DateCreated = new DateTime(2025, 2, 9, 12, 56, 7, 348, DateTimeKind.Local).AddTicks(9339),
                            FileExtension = ".png",
                            FileName = "test",
                            Title = "test",
                            Url = "https://localhost:7166/Images/test.png"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the tag.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The name of the tag.");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The URL handle for the tag.");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasComment("This class represents a tag for a blog post.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Web Development",
                            Slug = "web-development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Machine Learning",
                            Slug = "machine-learning"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AI",
                            Slug = "ai"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Data Science",
                            Slug = "data-science"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cloud Computing",
                            Slug = "cloud-computing"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cybersecurity",
                            Slug = "cybersecurity"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Blockchain",
                            Slug = "blockchain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Software Engineering",
                            Slug = "software-engineering"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Technology",
                            Slug = "technology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cooking",
                            Slug = "cooking"
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.UserAchievement", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key of the user achievement");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int")
                        .HasComment("Primary key of the achievement");

                    b.Property<DateTime>("AchievementDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the achievement was achieved");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit")
                        .HasComment("Flag indicating if the achievement is achieved");

                    b.Property<int>("Progress")
                        .HasColumnType("int")
                        .HasComment("Progress of the achievement");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UserAchievements");

                    b.HasComment("User achievement entity");

                    b.HasData(
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 1,
                            AchievementDate = new DateTime(2025, 1, 30, 10, 56, 7, 349, DateTimeKind.Utc).AddTicks(4379),
                            IsAchieved = true,
                            Progress = 1
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 2,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 10
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 3,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 10
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 4,
                            AchievementDate = new DateTime(2025, 2, 3, 10, 56, 7, 349, DateTimeKind.Utc).AddTicks(4381),
                            IsAchieved = true,
                            Progress = 1
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 5,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 3
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 6,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 3
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 7,
                            AchievementDate = new DateTime(2025, 2, 7, 10, 56, 7, 349, DateTimeKind.Utc).AddTicks(4383),
                            IsAchieved = true,
                            Progress = 1
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 8,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 3
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 9,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 3
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 10,
                            AchievementDate = new DateTime(2025, 2, 1, 10, 56, 7, 349, DateTimeKind.Utc).AddTicks(4385),
                            IsAchieved = true,
                            Progress = 1
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 11,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 3
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            AchievementId = 12,
                            AchievementDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAchieved = false,
                            Progress = 3
                        });
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.UserForumCommuntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's unique identifier");

                    b.Property<int>("ForumCommunityId")
                        .HasColumnType("int")
                        .HasComment("Community's unique identifier");

                    b.HasKey("UserId", "ForumCommunityId");

                    b.HasIndex("ForumCommunityId");

                    b.ToTable("UserForumCommuntities");

                    b.HasComment("User community entity");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.UserReadBlog", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasComment("Blog identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Reading date");

                    b.HasKey("UserId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("UserReadBlogs");

                    b.HasComment("Reading entity");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.VisitedForumCommunity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the user visited forum community");

                    b.Property<int>("ForumCommunityId")
                        .HasColumnType("int")
                        .HasComment("Id of the forum community visited by the user");

                    b.Property<DateTime>("LastVisited")
                        .HasColumnType("datetime2");

                    b.Property<int>("Visits")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ForumCommunityId");

                    b.HasIndex("ForumCommunityId");

                    b.ToTable("VisitedForumCommunities");

                    b.HasComment("Visited forum community entity");

                    b.HasData(
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            ForumCommunityId = 1,
                            LastVisited = new DateTime(2025, 2, 7, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(3208),
                            Visits = 4
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            ForumCommunityId = 2,
                            LastVisited = new DateTime(2025, 2, 7, 10, 56, 7, 350, DateTimeKind.Utc).AddTicks(3209),
                            Visits = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e83adcc5-9da0-4021-a816-3cb518656890",
                            ConcurrencyStamp = "e83adcc5-9da0-4021-a816-3cb518656890",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b2dd1368-11e6-4084-ad72-dd78c95c3290",
                            ConcurrencyStamp = "b2dd1368-11e6-4084-ad72-dd78c95c3290",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            RoleId = "e83adcc5-9da0-4021-a816-3cb518656890"
                        },
                        new
                        {
                            UserId = "67b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b",
                            RoleId = "b2dd1368-11e6-4084-ad72-dd78c95c3290"
                        },
                        new
                        {
                            UserId = "79b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c",
                            RoleId = "b2dd1368-11e6-4084-ad72-dd78c95c3290"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Blog", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.Category", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BlogPostTag", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Bookmark", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "Author")
                        .WithMany("Bookmarks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.Blog", "Blog")
                        .WithMany("Bookmarks")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.BookmarkFolder", "Folder")
                        .WithMany("Bookmarks")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Blog");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BookmarkFolder", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany("BookmarkFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Comment", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Blog", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumCommunity", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ForumCategory", "ForumCategory")
                        .WithMany("ForumCommunities")
                        .HasForeignKey("ForumCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumCategory");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumPost", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ForumCommunity", "ForumCommunity")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumCommunityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany("ForumPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumCommunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumPostComment", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ForumPost", "ForumPost")
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany("ForumPostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Images", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Achievement", "Achievement")
                        .WithOne("Images")
                        .HasForeignKey("BlogAPI.Models.Domain.Images", "AchievementId");

                    b.HasOne("BlogAPI.Models.Domain.Blog", "Blog")
                        .WithMany("Images")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.ForumCommunity", "ForumCommunity")
                        .WithOne("Image")
                        .HasForeignKey("BlogAPI.Models.Domain.Images", "ForumCommunityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.ForumPost", "ForumPost")
                        .WithOne("Image")
                        .HasForeignKey("BlogAPI.Models.Domain.Images", "ForumPostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithOne("ProfileImage")
                        .HasForeignKey("BlogAPI.Models.Domain.Images", "UserId");

                    b.Navigation("Achievement");

                    b.Navigation("Blog");

                    b.Navigation("ForumCommunity");

                    b.Navigation("ForumPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.UserAchievement", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.UserForumCommuntity", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ForumCommunity", "ForumCommunity")
                        .WithMany("UserForumCommunities")
                        .HasForeignKey("ForumCommunityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumCommunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.UserReadBlog", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.VisitedForumCommunity", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ForumCommunity", "ForumCommunity")
                        .WithMany()
                        .HasForeignKey("ForumCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumCommunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlogAPI.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Achievement", b =>
                {
                    b.Navigation("Images")
                        .IsRequired();
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("BookmarkFolders");

                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("ForumPostComments");

                    b.Navigation("ForumPosts");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Blog", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.BookmarkFolder", b =>
                {
                    b.Navigation("Bookmarks");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.Category", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumCategory", b =>
                {
                    b.Navigation("ForumCommunities");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumCommunity", b =>
                {
                    b.Navigation("ForumPosts");

                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("UserForumCommunities");
                });

            modelBuilder.Entity("BlogAPI.Models.Domain.ForumPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
